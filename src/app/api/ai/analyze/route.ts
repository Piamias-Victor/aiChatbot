// src/app/api/ai/analyze/route.ts
// Route API pour g√©n√©rer des requ√™tes SQL, les ex√©cuter et analyser les r√©sultats

import { NextRequest, NextResponse } from 'next/server';
import { generateSQL, validateSQLSafety } from '@/lib/ai/sql-generation';
import { executeSQLSafely } from '@/lib/db/sql-executor';
import { analyzeQueryResults } from '@/lib/ai/result-analyzer';
import { SQLGenerationRequest, SQLGenerationResponse } from '@/types/ai-sql';

export async function POST(request: NextRequest) {
  // Horodatage du d√©but du traitement
  const startTime = Date.now();

  try {
    // R√©cup√©rer et valider le corps de la requ√™te
    const body = await request.json();

    // Logs d√©taill√©s de la requ√™te entrante
    console.log('------- D√âBUT DE LA REQU√äTE D\'ANALYSE -------');
    console.log('Corps de la requ√™te:', JSON.stringify(body, null, 2));

    // Validation de base
    if (!body.query || !body.pharmacyId) {
      console.warn('Requ√™te invalide : query ou pharmacyId manquant');
      return NextResponse.json({
        status: 'error',
        message: 'Les param√®tres query et pharmacyId sont requis'
      }, { status: 400 });
    }

    // 1. G√âN√âRATION SQL
    console.log('üîç √âtape 1 : G√©n√©ration de la requ√™te SQL');
    const sqlRequest: SQLGenerationRequest = {
      query: body.query,
      pharmacyId: body.pharmacyId,
      dateRange: body.dateRange,
      conversationHistory: body.conversationHistory
    };

    const sqlResponse: SQLGenerationResponse = await generateSQL(sqlRequest);

    // Log du r√©sultat de g√©n√©ration SQL
    console.log('R√©sultat g√©n√©ration SQL:', {
      sql: sqlResponse.sql,
      explanation: sqlResponse.explanation,
      confidence: sqlResponse.confidence,
      error: sqlResponse.error
    });

    if (sqlResponse.error || !sqlResponse.sql) {
      console.error('‚ùå √âchec de la g√©n√©ration SQL:', sqlResponse.error);
      return NextResponse.json({
        status: 'error',
        message: sqlResponse.error || '√âchec de la g√©n√©ration SQL',
        explanation: sqlResponse.explanation
      }, { status: 400 });
    }

    // V√©rification de s√©curit√©
    console.log('üõ°Ô∏è V√©rification de s√©curit√© de la requ√™te SQL');
    const safetyCheck = validateSQLSafety(sqlResponse.sql);

    if (!safetyCheck.safe) {
      console.warn('‚ö†Ô∏è Requ√™te SQL non s√©curis√©e:', safetyCheck.reason);
      return NextResponse.json({
        status: 'error',
        message: 'Requ√™te SQL non s√©curis√©e',
        reason: safetyCheck.reason,
        explanation: sqlResponse.explanation
      }, { status: 400 });
    }

    // 2. EX√âCUTION SQL
    console.log('üíæ √âtape 2 : Ex√©cution de la requ√™te SQL');
    const params = [body.pharmacyId];

    // Nettoyage de la requ√™te SQL
    const rawSQL = sqlResponse.sql.trim();

    // Remplacement s√©curis√© des identifiants de pharmacie entre quotes
    const parameterizedSql = rawSQL.replaceAll(`'${body.pharmacyId}'`, '$1');

    console.log('Requ√™te SQL param√©tr√©e :', parameterizedSql);
    console.log('Param√®tres :', params);

    const executionResult = await executeSQLSafely(
      parameterizedSql,
      params,
      { maxRows: 100 }
    );

    // Log du r√©sultat d'ex√©cution
    console.log('R√©sultat ex√©cution SQL:', {
      rowCount: executionResult.rowCount,
      columns: executionResult.columns
    });

    // 3. ANALYSE DES R√âSULTATS
    console.log('üìä √âtape 3 : Analyse des r√©sultats');
    const analysisResult = await analyzeQueryResults(executionResult, {
      originalQuery: body.query,
      sqlExplanation: sqlResponse.explanation,
      suggestVisualization: true
    });

    // Log de l'analyse
    console.log('Type de visualisation sugg√©r√©:', analysisResult.visualizationType);

    // Calcul du temps total de traitement
    const processingTime = Date.now() - startTime;
    console.log(`‚è±Ô∏è Temps total de traitement : ${processingTime}ms`);

    console.log('------- FIN DE LA REQU√äTE D\'ANALYSE -------');

    // 4. RETOURNER R√âPONSE COMPL√àTE
    return NextResponse.json({
      status: 'success',
      processingTime,
      data: {
        sql: sqlResponse.sql,
        explanation: sqlResponse.explanation,
        confidence: sqlResponse.confidence,
        result: executionResult,
        analysis: analysisResult.analysis,
        visualizationType: analysisResult.visualizationType,
        visualizationData: analysisResult.visualizationData
      }
    });

  } catch (error) {
    const processingTime = Date.now() - startTime;
    console.error('‚ùå Erreur compl√®te dans l\'API analyze:', error);

    return NextResponse.json({
      status: 'error',
      processingTime,
      message: 'Erreur lors du traitement de la requ√™te',
      error: {
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined
      }
    }, { status: 500 });
  }
}