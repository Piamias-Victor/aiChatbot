// src/app/api/ai/analyze/route.ts
// Route API pour g√©n√©rer des requ√™tes SQL, les ex√©cuter et analyser les r√©sultats

import { NextRequest, NextResponse } from 'next/server';
import { generateSQL, validateSQLSafety } from '@/lib/ai/sql-generation';
import { executeSQLSafely } from '@/lib/db/sql-executor';
import { analyzeQueryResults } from '@/lib/ai/result-analyzer';
import { SQLGenerationRequest, SQLGenerationResponse } from '@/types/ai-sql';

export async function POST(request: NextRequest) {
  // Horodatage du d√©but du traitement
  const startTime = Date.now();

  try {
    // R√©cup√©rer et valider le corps de la requ√™te
    const body = await request.json();

    // Logs d√©taill√©s de la requ√™te entrante
    console.log('------- D√âBUT DE LA REQU√äTE D\'ANALYSE -------');
    console.log('Corps de la requ√™te:', JSON.stringify(body, null, 2));

    // Validation de base
    if (!body.query || !body.pharmacyId) {
      console.warn('Requ√™te invalide : query ou pharmacyId manquant');
      return NextResponse.json({
        status: 'error',
        message: 'Les param√®tres query et pharmacyId sont requis'
      }, { status: 400 });
    }

    // 1. G√âN√âRATION SQL
    console.log('üîç √âtape 1 : G√©n√©ration de la requ√™te SQL');
    const sqlRequest: SQLGenerationRequest = {
      query: body.query,
      pharmacyId: body.pharmacyId,
      dateRange: body.dateRange,
      conversationHistory: body.conversationHistory
    };

    const sqlResponse: SQLGenerationResponse = await generateSQL(sqlRequest);

    // Log du r√©sultat de g√©n√©ration SQL
    console.log('R√©sultat g√©n√©ration SQL:', {
      sql: sqlResponse.sql,
      explanation: sqlResponse.explanation,
      confidence: sqlResponse.confidence,
      error: sqlResponse.error
    });

    if (sqlResponse.error || !sqlResponse.sql) {
      console.error('‚ùå √âchec de la g√©n√©ration SQL:', sqlResponse.error);
      return NextResponse.json({
        status: 'error',
        message: sqlResponse.error || '√âchec de la g√©n√©ration SQL',
        explanation: sqlResponse.explanation
      }, { status: 400 });
    }

    // V√©rification de s√©curit√© suppl√©mentaire
    console.log('üõ°Ô∏è V√©rification de s√©curit√© de la requ√™te SQL');
    const safetyCheck = validateSQLSafety(sqlResponse.sql);

    if (!safetyCheck.safe) {
      console.warn('‚ö†Ô∏è Requ√™te SQL non s√©curis√©e:', safetyCheck.reason);
      return NextResponse.json({
        status: 'error',
        message: 'Requ√™te SQL non s√©curis√©e',
        reason: safetyCheck.reason,
        explanation: sqlResponse.explanation
      }, { status: 400 });
    }

    // 2. EX√âCUTION SQL
    console.log('üíæ √âtape 2 : Ex√©cution de la requ√™te SQL');
    
    // Pr√©paration des param√®tres pour la requ√™te
    const params = [body.pharmacyId];
    
    // Ajout des param√®tres de date si pr√©sents
    if (body.dateRange) {
      params.push(body.dateRange.startDate, body.dateRange.endDate);
    }
    
    // Ajout d'une valeur pour le param√®tre LIMIT si n√©cessaire
    // V√©rifier si la requ√™te contient un param√®tre LIMIT $4
    if (sqlResponse.sql.includes('LIMIT $4')) {
      params.push(10); // Valeur par d√©faut pour la limite
    }
    
    // Si des dates litt√©rales sont pr√©sentes dans la requ√™te, les remplacer par les param√®tres
    let parameterizedSql = sqlResponse.sql;
    if (parameterizedSql.includes("'2025-01-01'") && parameterizedSql.includes("'2025-12-31'")) {
      // Pour les requ√™tes avec des dates cod√©es en dur pour l'ann√©e en cours
      params.splice(1, 0, '2025-01-01', '2025-12-31');
    }
    
    // Nettoyage de la requ√™te SQL
    const rawSQL = sqlResponse.sql.trim();

    // Remplacement des valeurs litt√©rales par des param√®tres pr√©par√©s
    parameterizedSql = rawSQL;
    
    // Remplacer les ID de pharmacie litt√©raux par des param√®tres
    parameterizedSql = parameterizedSql.replace(
      new RegExp(`'${body.pharmacyId}'|"${body.pharmacyId}"`, 'g'), 
      '$1'
    );
    
    // Remplacer les dates litt√©rales par des param√®tres si n√©cessaire
    if (body.dateRange) {
      parameterizedSql = parameterizedSql
        .replace(
          new RegExp(`'${body.dateRange.startDate}'|"${body.dateRange.startDate}"`, 'g'), 
          '$2'
        )
        .replace(
          new RegExp(`'${body.dateRange.endDate}'|"${body.dateRange.endDate}"`, 'g'), 
          '$3'
        );
    }

    console.log('Requ√™te SQL param√©tr√©e :', parameterizedSql);
    console.log('Param√®tres :', params);

    try {
      const executionResult = await executeSQLSafely(
        parameterizedSql,
        params,
        { maxRows: 100, timeoutMs: 10000 }
      );

      // Log du r√©sultat d'ex√©cution
      console.log('R√©sultat ex√©cution SQL:', {
        rowCount: executionResult.rowCount,
        columns: executionResult.columns,
        queryTime: executionResult.queryTime
      });

      // 3. ANALYSE DES R√âSULTATS
      console.log('üìä √âtape 3 : Analyse des r√©sultats');
      const analysisResult = await analyzeQueryResults(executionResult, {
        originalQuery: body.query,
        sqlExplanation: sqlResponse.explanation,
        suggestVisualization: true
      });

      // Log de l'analyse
      console.log('Type de visualisation sugg√©r√©:', analysisResult.visualizationType);

      // Calcul du temps total de traitement
      const processingTime = Date.now() - startTime;
      console.log(`‚è±Ô∏è Temps total de traitement : ${processingTime}ms`);

      console.log('------- FIN DE LA REQU√äTE D\'ANALYSE -------');

      // 4. RETOURNER R√âPONSE COMPL√àTE
      return NextResponse.json({
        status: 'success',
        processingTime,
        data: {
          sql: sqlResponse.sql,
          explanation: sqlResponse.explanation,
          confidence: sqlResponse.confidence,
          result: executionResult,
          analysis: analysisResult.analysis,
          visualizationType: analysisResult.visualizationType,
          visualizationData: analysisResult.visualizationData
        }
      });
      
    } catch (sqlExecError) {
      console.error('Erreur d\'ex√©cution SQL:', sqlExecError);
      
      // En cas d'erreur SQL, tenter avec une requ√™te simplifi√©e
      const fallbackSQL = `
        SELECT 
          ip.name AS "Nom du produit", 
          gp.category AS "Cat√©gorie",
          inv.stock AS "Stock actuel"
        FROM 
          data_internalproduct ip
        LEFT JOIN 
          data_globalproduct gp ON ip.code_13_ref_id = gp.code_13_ref
        LEFT JOIN 
          data_inventorysnapshot inv ON ip.id = inv.product_id
        WHERE 
          ip.pharmacy_id = $1
        AND 
          (inv.date IS NULL OR inv.date = (
            SELECT MAX(date) FROM data_inventorysnapshot 
            WHERE product_id = ip.id
          ))
        LIMIT 20
      `;
      
      console.log('Tentative avec requ√™te de secours:', fallbackSQL);
      
      const fallbackResult = await executeSQLSafely(
        fallbackSQL,
        [body.pharmacyId],
        { maxRows: 20 }
      );
      
      const processingTime = Date.now() - startTime;
      
      return NextResponse.json({
        status: 'partial_success',
        processingTime,
        message: 'La requ√™te originale a √©chou√©, utilisation d\'une requ√™te simplifi√©e',
        error: sqlExecError instanceof Error ? sqlExecError.message : String(sqlExecError),
        data: {
          sql: fallbackSQL,
          explanation: 'Requ√™te simplifi√©e retournant les produits disponibles suite √† une erreur dans la requ√™te originale.',
          confidence: 0.3,
          result: fallbackResult,
          analysis: 'Suite √† une erreur dans la requ√™te initiale, voici les produits disponibles dans votre pharmacie. La requ√™te originale n\'a pas pu √™tre ex√©cut√©e.'
        }
      });
    }

  } catch (error) {
    const processingTime = Date.now() - startTime;
    console.error('‚ùå Erreur compl√®te dans l\'API analyze:', error);

    return NextResponse.json({
      status: 'error',
      processingTime,
      message: 'Erreur lors du traitement de la requ√™te',
      error: {
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined
      }
    }, { status: 500 });
  }
}